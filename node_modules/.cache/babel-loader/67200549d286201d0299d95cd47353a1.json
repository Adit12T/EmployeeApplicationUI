{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\adity\\\\eclipse-workspace\\\\EmployeeApplicationUI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport * as Types from \"../actions/types\";\nvar initialUserObj = {\n  result: []\n};\n\nvar getEmployeeListError = function getEmployeeListError(state) {\n  var newState = _objectSpread({}, state);\n\n  return _objectSpread({}, newState);\n};\n\nvar getEmployeeList = function getEmployeeList(state, action) {\n  //console.log(\"REdux\" + JSON.stringify(action));\n  var newState = _objectSpread({}, state);\n\n  if (action.result !== undefined) {\n    newState = Object.assign({}, state, {\n      result: JSON.parse(JSON.stringify(action.result))\n    }); //  console.log(\"New\" + JSON.stringify(newState));\n  }\n\n  return _objectSpread({}, newState);\n};\n\nvar getProjectListError = function getProjectListError(state) {\n  var newState = _objectSpread({}, state);\n\n  return _objectSpread({}, newState);\n};\n\nvar getProjectList = function getProjectList(state, action) {\n  //console.log(\"REdux\" + JSON.stringify(action));\n  var newState = _objectSpread({}, state);\n\n  if (action.result !== undefined) {\n    newState = Object.assign({}, state, {\n      result: JSON.parse(JSON.stringify(action.result))\n    }); //  console.log(\"New\" + JSON.stringify(newState));\n  }\n\n  return _objectSpread({}, newState);\n};\n\nvar handleSearchEmp = function handleSearchEmp(state, action) {\n  // let newState = { ...state };\n  // if (action.result !== undefined) {\n  //   let employee = [];\n  //   for (let val in state.result) {\n  //     if (state.result[val].firstName.match(action.result.firstName)) {\n  //       employee.push(state.result[val]);\n  //     }\n  //   }\n  //   newState = Object.assign({}, state, {\n  //     result: JSON.parse(JSON.stringify(action.result))\n  //   });\n  // }\n  // return { ...newState };\n  var newState = _objectSpread({}, state);\n\n  if (action.result !== undefined) {\n    newState = Object.assign({}, state, {\n      result: JSON.parse(JSON.stringify(action.result))\n    }); // console.log(\"New\" + JSON.stringify(newState));\n  }\n\n  return _objectSpread({}, newState);\n};\n\nvar searchError = function searchError(state) {\n  var newState = _objectSpread({}, state);\n\n  return _objectSpread({}, newState);\n};\n\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialUserObj;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  switch (action.type) {\n    case Types.GET_EMPLOYEE_LIST:\n      return _objectSpread({}, state);\n\n    case Types.GET_EMPLOYEE_LIST_SUCCESS_RESPONSE:\n      return getEmployeeList(state, action);\n\n    case Types.GET_EMPLOYEE_LIST_ERROR_RESPONSE:\n      return getEmployeeListError(state);\n\n    case Types.PROJECT_LIST:\n      return _objectSpread({}, state);\n\n    case Types.PROJECT_LIST_SUCCESS_RESPONSE:\n      return getProjectList(state, action);\n\n    case Types.PROJECT_LIST_ERROR_RESPONSE:\n      return getProjectListError(state);\n\n    case Types.SEARCH_EMP:\n      return _objectSpread({}, state);\n\n    case Types.SEARCH_EMP_SUCCESS:\n      return handleSearchEmp(state, action);\n\n    case Types.SEARCH_EMP_ERROR:\n      return searchError(state);\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:\\Users\\adity\\eclipse-workspace\\EmployeeApplicationUI\\src\\redux\\reducers\\Get_List.js"],"names":["Types","initialUserObj","result","getEmployeeListError","state","newState","getEmployeeList","action","undefined","Object","assign","JSON","parse","stringify","getProjectListError","getProjectList","handleSearchEmp","searchError","type","GET_EMPLOYEE_LIST","GET_EMPLOYEE_LIST_SUCCESS_RESPONSE","GET_EMPLOYEE_LIST_ERROR_RESPONSE","PROJECT_LIST","PROJECT_LIST_SUCCESS_RESPONSE","PROJECT_LIST_ERROR_RESPONSE","SEARCH_EMP","SEARCH_EMP_SUCCESS","SEARCH_EMP_ERROR"],"mappings":"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","sourcesContent":["import * as Types from \"../actions/types\";\r\n\r\nconst initialUserObj = {\r\n  result: []\r\n};\r\n\r\nconst getEmployeeListError = state => {\r\n  let newState = { ...state };\r\n  return { ...newState };\r\n};\r\n\r\nconst getEmployeeList = (state, action) => {\r\n  //console.log(\"REdux\" + JSON.stringify(action));\r\n  let newState = { ...state };\r\n  if (action.result !== undefined) {\r\n    newState = Object.assign({}, state, {\r\n      result: JSON.parse(JSON.stringify(action.result))\r\n    });\r\n    //  console.log(\"New\" + JSON.stringify(newState));\r\n  }\r\n  return { ...newState };\r\n};\r\n\r\nconst getProjectListError = state => {\r\n  let newState = { ...state };\r\n  return { ...newState };\r\n};\r\n\r\nconst getProjectList = (state, action) => {\r\n  //console.log(\"REdux\" + JSON.stringify(action));\r\n  let newState = { ...state };\r\n  if (action.result !== undefined) {\r\n    newState = Object.assign({}, state, {\r\n      result: JSON.parse(JSON.stringify(action.result))\r\n    });\r\n    //  console.log(\"New\" + JSON.stringify(newState));\r\n  }\r\n  return { ...newState };\r\n};\r\n\r\nconst handleSearchEmp = (state, action) => {\r\n  // let newState = { ...state };\r\n  // if (action.result !== undefined) {\r\n  //   let employee = [];\r\n  //   for (let val in state.result) {\r\n  //     if (state.result[val].firstName.match(action.result.firstName)) {\r\n  //       employee.push(state.result[val]);\r\n  //     }\r\n  //   }\r\n  //   newState = Object.assign({}, state, {\r\n  //     result: JSON.parse(JSON.stringify(action.result))\r\n  //   });\r\n  // }\r\n  // return { ...newState };\r\n  let newState = { ...state };\r\n  if (action.result !== undefined) {\r\n    newState = Object.assign({}, state, {\r\n      result: JSON.parse(JSON.stringify(action.result))\r\n    });\r\n    // console.log(\"New\" + JSON.stringify(newState));\r\n  }\r\n  return { ...newState };\r\n};\r\n\r\nconst searchError = state => {\r\n  let newState = { ...state };\r\n  return { ...newState };\r\n};\r\n\r\nexport default (state = initialUserObj, action = {}) => {\r\n  switch (action.type) {\r\n    case Types.GET_EMPLOYEE_LIST:\r\n      return { ...state };\r\n    case Types.GET_EMPLOYEE_LIST_SUCCESS_RESPONSE:\r\n      return getEmployeeList(state, action);\r\n    case Types.GET_EMPLOYEE_LIST_ERROR_RESPONSE:\r\n      return getEmployeeListError(state);\r\n    case Types.PROJECT_LIST:\r\n      return { ...state };\r\n    case Types.PROJECT_LIST_SUCCESS_RESPONSE:\r\n      return getProjectList(state, action);\r\n    case Types.PROJECT_LIST_ERROR_RESPONSE:\r\n      return getProjectListError(state);\r\n    case Types.SEARCH_EMP:\r\n      return { ...state };\r\n    case Types.SEARCH_EMP_SUCCESS:\r\n      return handleSearchEmp(state, action);\r\n    case Types.SEARCH_EMP_ERROR:\r\n      return searchError(state);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}